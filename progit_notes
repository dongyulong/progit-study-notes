这是阅读progit文档时的笔记，使用github管理

1.git的配置
git config --global user.name "Yulong Dong"
git config --global user.email dongyl1996@thundersoft.com
git config --global core.editor vim
git config --global merge.tool vimdiff
git config --list

2.git很好的学习方法，类似man
git <verb> --help
git help <verb>
man git-<verb>
git help config

3.如何建立一个新的库
git init
git add README
git commit -m 'initial project version'

4.如何从远程库下载库
git clone [url]
git clone git@github.com:dongyulong/progit-study-notes.git
git clone git@github.com:dongyulong/progit-study-notes.git mygit

5.git status
可以查看当前库的状态
“changes to be committed” 这行下面的,就说明是已暂存状态。
“Untracked files”这行下面。Git 不会自动将之纳入跟踪范围,
hanged but not updated” 这行下面,说明已跟踪文件的内容发生了变化,但还没有放到暂存区


6.这个文件中写的是git库忽略的文件类型，具体写法可以再查，先认知
cat .gitignore
# 此为注释 – 将被 Git 忽略
*.a # 忽略所有 .a 结尾的文件
!lib.a # 但 lib.a 除外
/TODO # 仅仅忽略项目根目录下的 TODO 文件,不包括 subdir/TODO
build/ # 忽略 build/ 目录下的所有文件
doc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt


7.git diff的用法
git diff
此命令比较的是工作目录中当前文件和暂存区域快照之间的差异,也就是修改之后还没有暂存起来的变化内容

若要看已经暂存起来的文件和上次提交时的快照之间的差异,可以用 git diff --cached命令

git rm --cached
我们想把文件从 Git 仓库中删除(亦即从暂存区域移除),但仍然希望保留在当前工作目录中

8.提交更新
git commit

8.git mv的用法
$ git mv file_from file_to

9.git log的用法
git log 有许多选项可以帮助你搜寻感兴趣的提交,接下来我们介绍些最常用的。
我们常用 -p 选项展开显示每次提交的内容差异,用 -2 则仅显示最近的两次更新:

git log --stat
在做代码审查,或者要快速浏览其他协作者提交的更新都作了哪些改动时,就可以用这个
选项

git log --pretty=online

git log --since=2.weeks
选项 说明
-(n) 仅显示最近的 n 条提交
--since, --after 仅显示指定时间之后的提交。
--until, --before 仅显示指定时间之前的提交。
--author 仅显示指定作者相关的提交。
--committer 仅显示指定提交者相关的提交。
-p 选项展开显示每次提交的内容差异,用 -2 则仅显示最近的两次更新:

$ git log test..master  查询master分支中的提交记录但不包含test分支记录
$ git log master..test  查询test分支中的提交记录但不办含master分支记录


10.gitk一个可视化的git工具
gitk

11.可以追加修改
git commit --amend

12.撤销index中的文件
git reset HEAD xx

13.撤销modified的文件
如果觉得刚才对 benchmarks.rb 的修改完全没有必要,该如何取消修改,回到之前的状
态(也就是修改之前的版本)呢
git checkout -- <file>

14.git remote 命令,它会列出每个远程库的简短名字


15.如何在本地模拟一个git远程仓库
git init --bare
dongyl@dongyl-desktop:temp.git$ git init --bare 
Initialized empty Git repository in /home/dongyl/source/repositrny/temp.git/
git remote add origin /home/dongyl/source/repositrny/temp.git
git remote -v
git push origin master
git clone /home/dongyl/source/repositrny/temp.git

git remote -v
 
git fetch [remote-name]

16.如何提交/系在新的代码到远程库
git pull origin master
git push origin master

17.使用参数查看当前分支是否已经merge
git branch --no-merged
git branch --merged

18.Subversion 会在服务器端自动合并提交上来的更新,而 Git 则必须先在本地合并后才能推送。

19.git pull 不仅会执行git fetch的操作，git pull 还做了merge的操作。
