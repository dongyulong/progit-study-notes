这是阅读progit文档时的笔记，使用github管理

1.git的配置
git config --global user.name "Yulong Dong"
git config --global user.email dongyl1996@thundersoft.com
git config --global core.editor vim
git config --global merge.tool vimdiff
git config --list

2.git很好的学习方法，类似man
git <verb> --help
git help <verb>
man git-<verb>
git help config

3.如何建立一个新的库
git init
git add README
git commit -m 'initial project version'

4.如何从远程库下载库
git clone [url]
git clone git@github.com:dongyulong/progit-study-notes.git
git clone git@github.com:dongyulong/progit-study-notes.git mygit

5.git status
可以查看当前库的状态
“changes to be committed” 这行下面的,就说明是已暂存状态。
“Untracked files”这行下面。Git 不会自动将之纳入跟踪范围,
hanged but not updated” 这行下面,说明已跟踪文件的内容发生了变化,但还没有放到暂存区

git status -s -b -s是精简版本 -b是显示当前分支，但是1.7.2后的版本支持


6.这个文件中写的是git库忽略的文件类型，具体写法可以再查，先认知
cat .gitignore
# 此为注释 – 将被 Git 忽略
*.a # 忽略所有 .a 结尾的文件
!lib.a # 但 lib.a 除外
/TODO # 仅仅忽略项目根目录下的 TODO 文件,不包括 subdir/TODO
build/ # 忽略 build/ 目录下的所有文件
doc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt


7.git diff的用法
git diff
此命令比较的是工作目录中当前文件和暂存区域快照之间的差异,也就是修改之后还没有暂存起来的变化内容

若要看已经暂存起来的文件和上次提交时的快照之间的差异,可以用 git diff --cached命令

git rm --cached
我们想把文件从 Git 仓库中删除(亦即从暂存区域移除),但仍然希望保留在当前工作目录中

8.提交更新
git commit

8.git mv的用法
$ git mv file_from file_to

9.git log的用法
git log 有许多选项可以帮助你搜寻感兴趣的提交,接下来我们介绍些最常用的。
我们常用 -p 选项展开显示每次提交的内容差异,用 -2 则仅显示最近的两次更新:

git log --stat
在做代码审查,或者要快速浏览其他协作者提交的更新都作了哪些改动时,就可以用这个
选项

git log --pretty=online

git log --since=2.weeks
选项 说明
-(n) 仅显示最近的 n 条提交
--since, --after 仅显示指定时间之后的提交。
--until, --before 仅显示指定时间之前的提交。
--author 仅显示指定作者相关的提交。
--committer 仅显示指定提交者相关的提交。
-p 选项展开显示每次提交的内容差异,用 -2 则仅显示最近的两次更新:

$ git log test..master  查询master分支中的提交记录但不包含test分支记录
$ git log master..test  查询test分支中的提交记录但不办含master分支记录

$ git log --grahp  图形显示分支关系

显示最近的三条日志
$ git log -3


10.gitk一个可视化的git工具
gitk

11.可以追加修改
git commit --amend

12.撤销index中的文件
git reset HEAD xx

13.撤销modified的文件
如果觉得刚才对 benchmarks.rb 的修改完全没有必要,该如何取消修改,回到之前的状
态(也就是修改之前的版本)呢
git checkout -- <file>

14.git remote 命令,它会列出每个远程库的简短名字


15.如何在本地模拟一个git远程仓库
git init --bare
dongyl@dongyl-desktop:temp.git$ git init --bare 
Initialized empty Git repository in /home/dongyl/source/repositrny/temp.git/
git remote add origin /home/dongyl/source/repositrny/temp.git
git remote -v
git push origin master
git clone /home/dongyl/source/repositrny/temp.git

git remote -v
 
git fetch [remote-name]

16.如何提交/系在新的代码到远程库
git pull origin master
git push origin master

17.使用参数查看当前分支是否已经merge
git branch --no-merged
git branch --merged

18.Subversion 会在服务器端自动合并提交上来的更新,而 Git 则必须先在本地合并后才能推送。

19.git pull 不仅会执行git fetch的操作，git pull 还做了merge的操作。

20.git config 参数不同修改配置文件也不一样
   git config -e
   git config -e --global
   git config -e --system

21.查看暂存区和head的目录树
   git ls-tree

22.如何恢复reset --hard的操作
首先看到最新的提交是7ddd0c1
dongyl@dongyl-desktop:progit_notes$ git log --pretty=oneline
7ddd0c14bbb6a24b21d16c57584f4bc85ccec43c git ls-tree
c1d32c4dce33bad80ed6c8c674a5f3c937fce9a3 git config -e
511fb575d36b5721875cf8121dee235ce031689c add comment
513ec842dd82608e2d97529008e60a8299e5f9e3 review notes

做了hard的reset到c1d32c4dc
dongyl@dongyl-desktop:progit_notes$ git reset c1d32c4dce33 --hard 
HEAD is now at c1d32c4 git config -e

可以看到最新的提交已经变成了c1d32c4dc
dongyl@dongyl-desktop:progit_notes$ tail -5 .git/logs/refs/heads/master 
1b8ef2b2626778d920e21f43148c980865d34398 513ec842dd82608e2d97529008e60a8299e5f9e3 yulong dong <yulong.x.dong1@sonyericsson.com> 1330336480 +0800	commit: review notes
513ec842dd82608e2d97529008e60a8299e5f9e3 511fb575d36b5721875cf8121dee235ce031689c yulong dong <yulong.x.dong1@sonyericsson.com> 1330337919 +0800	commit: add comment
511fb575d36b5721875cf8121dee235ce031689c c1d32c4dce33bad80ed6c8c674a5f3c937fce9a3 yulong dong <yulong.x.dong1@sonyericsson.com> 1330570485 +0800	commit: git config -e
c1d32c4dce33bad80ed6c8c674a5f3c937fce9a3 7ddd0c14bbb6a24b21d16c57584f4bc85ccec43c yulong dong <yulong.x.dong1@sonyericsson.com> 1330571978 +0800	commit: git ls-tree
7ddd0c14bbb6a24b21d16c57584f4bc85ccec43c c1d32c4dce33bad80ed6c8c674a5f3c937fce9a3 yulong dong <yulong.x.dong1@sonyericsson.com> 1330579262 +0800	c1d32c4dce33: updating HEAD

显出reset前的状态
dongyl@dongyl-desktop:progit_notes$ git reflog show master | head -5
c1d32c4 master@{0}: c1d32c4dce33: updating HEAD
7ddd0c1 master@{1}: commit: git ls-tree
c1d32c4 master@{2}: commit: git config -e
511fb57 master@{3}: commit: add comment
513ec84 master@{4}: commit: review notes

重新reset到7ddd0c1
dongyl@dongyl-desktop:progit_notes$ git reset --hard master@{1}
HEAD is now at 7ddd0c1 git ls-tree

23.查看对象id的内容
   git cat-file -p ID

24.
1.master的head指针指向的id
dongyl@dongyl-desktop:progit_notes$ cat .git/refs/heads/master 
7ddd0c14bbb6a24b21d16c57584f4bc85ccec43c
2.当前head指向的分支
dongyl@dongyl-desktop:progit_notes$ cat .git/HEAD
ref: refs/heads/develop
3.其他分支的head指向的id
dongyl@dongyl-desktop:progit_notes$ cat .git/refs/heads/develop 
7ddd0c14bbb6a24b21d16c57584f4bc85ccec43c

25.分离头指针问题
dongyl@dongyl-desktop:progit_notes$ git co 47d40930df4
Note: checking out '47d40930df4'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

  HEAD is now at 47d4093... how to reset "reset --hard"
  dongyl@dongyl-desktop:progit_notes$ git br
  * (no branch) 47d4093 how to reset "reset --hard"
    develop     6dbd408 git cat-file
	  master      6dbd408 [ahead 4] git cat-file
	  
dongyl@dongyl-desktop:progit_notes$ git rev-parse HEAD master develop
47d40930df475fe91f4c0cb93a775599746b14ac
6dbd4082384eba050196628c25c858e265e86d7e
6dbd4082384eba050196628c25c858e265e86d7e

dongyl@dongyl-desktop:progit_notes$ git st
# Not currently on any branch.
nothing to commit (working directory clean)

dongyl@dongyl-desktop:progit_notes$ git commit -a
# Not currently on any branch.
	nothing to commit (working directory clean)
	dongyl@dongyl-desktop:progit_notes$ git checkout master 
	Previous HEAD position was 47d4093... how to reset "reset --hard"
	Switched to branch 'master'
	Your branch is ahead of 'origin/master' by 4 commits.
	dongyl@dongyl-desktop:progit_notes$ git rev-parse HEAD master develop
	6dbd4082384eba050196628c25c858e265e86d7e
	6dbd4082384eba050196628c25c858e265e86d7e
	6dbd4082384eba050196628c25c858e265e86d7e

26.git clean清楚untracked file
       -d
Remove untracked directories in addition to untracked files. If an untracked directory is managed by a different git repository, it is not removed by default.
Use -f option twice if you really want to remove such a directory.
       -n, --dry-run
Don’t actually remove anything, just show what would be done.

27.git stash
首先对已做的改变做git stash之后workspace就干净了
dongyl@dongyl-desktop:progit_notes$ git stash
Saved working directory and index state WIP on develop: 6dbd408 git cat-file
HEAD is now at 6dbd408 git cat-file

增加xx文件，并加入stash
dongyl@dongyl-desktop:progit_notes$ touch xx
dongyl@dongyl-desktop:progit_notes$ git add xx
dongyl@dongyl-desktop:progit_notes$ git stash
Saved working directory and index state WIP on develop: 6dbd408 git cat-file
HEAD is now at 6dbd408 git cat-file

看reflog
dongyl@dongyl-desktop:progit_notes$ git reflog show refs/stash
7c7ac76 refs/stash@{0}: WIP on develop: 6dbd408 git cat-file
009a4f1 refs/stash@{1}: WIP on develop: 6dbd408 git cat-file

list结果和reflog一样
dongyl@dongyl-desktop:progit_notes$ git stash list
stash@{0}: WIP on develop: 6dbd408 git cat-file
stash@{1}: WIP on develop: 6dbd408 git cat-file

dongyl@dongyl-desktop:progit_notes$ cat .git/refs/stash 
7c7ac7695b5a6ecebc01de716a524cefba0364fd

dongyl@dongyl-desktop:progit_notes$ cat .git/logs/refs/stash 
0000000000000000000000000000000000000000 009a4f1b868777d81a47509ee66cca0a83fd819f yulong dong <yulong.x.dong1@sonyericsson.com> 1330582589 +0800	WIP on develop: 6dbd408 git cat-file
009a4f1b868777d81a47509ee66cca0a83fd819f 7c7ac7695b5a6ecebc01de716a524cefba0364fd yulong dong <yulong.x.dong1@sonyericsson.com> 1330582607 +0800	WIP on develop: 6dbd408 git cat-file

27.git tag打标签
dongyl@dongyl-desktop:progit_notes$ git tag -m "start to study git basic command" gotgit
dongyl@dongyl-desktop:progit_notes$ git describe 
gotgit

28.文件追溯
git blame 文件名

29.单步悔棋
git commit --amend 可以修改最近一次提交无须再提交一次

30.多步悔棋
git reset --soft SHA1
git commit 
